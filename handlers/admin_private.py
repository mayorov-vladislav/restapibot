import requests
import asyncio
import logging
import json
from aiogram import F, Router, types, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.types import BufferedInputFile
from common.commands import *
from common.db_settings import *

# from common.subscribe_channels import CHANNEL_ID
from filters.chat_types import *
from keyboards.inline import get_callback_btns
from keyboards.reply import *


logging.basicConfig(level=logging.INFO)


admin_private_router = Router()
admin_private_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


@admin_private_router.message(Command("apanel"))
@admin_private_router.message(F.text == "üìå–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def apanel(message: types.Message):
    id = message.from_user.id
    if is_superadmin(id):
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —É–≤–∞–∂–∞–µ–º—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!üëã",
            reply_markup=default_superadmin_keyboard,
        )
    elif is_admin(id):
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —É–≤–∞–∂–∞–µ–º—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!üëã",
            reply_markup=default_admin_keyboard,
        )


@admin_private_router.message(Command("acommands"))
@admin_private_router.message(F.text == "üí¨–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def acommands(message: types.Message, bot: Bot):
    for adm_cmds_list in adm_cmd_list:
        if adm_cmds_list:
            await message.reply(adm_cmds_list)


@admin_private_router.message(Command("ahelp"))
@admin_private_router.message(F.text == "üí°–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def ahelp(message: types.Message, bot: Bot):
    await message.reply(
        f"–ù–∏–∂–µ –±—É–¥–µ—Ç –≤—Å—è –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
        "–ß—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –í–∞–º –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ - /acommands"
    )


@admin_private_router.message(F.text == "üíé–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu(message: types.Message):
    if is_superadmin(message.from_user.id):
        await message.reply(
            f"üîô–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=superadmin_user_keyboard
        )
    elif is_admin(message.from_user.id):
        await message.reply(
            f"üîô–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=admin_user_keyboard
        )


class GetApiForm(StatesGroup):
    api_url = State()


@admin_private_router.message(Command("getrestapi"))
@admin_private_router.message(F.text == "‚ô®Ô∏è–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é REST API")
async def get_rest_api(message: types.Message, bot: Bot, state: FSMContext):
    cancel_btn = get_keyboard("–û—Ç–º–µ–Ω–∞‚ùå")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=cancel_btn)
    await state.set_state(GetApiForm.api_url)


@admin_private_router.message(StateFilter(GetApiForm.api_url))
async def process_api_url(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞‚ùå":
        if is_superadmin(message.from_user.id):
            await message.answer(
                "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.",
                reply_markup=default_superadmin_keyboard,
            )
            await state.clear()
            return
        elif is_admin(message.from_user.id):
            await message.answer(
                "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=default_admin_keyboard
            )
            await state.clear()
            return

    await state.update_data(api_url=message.text)
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö ‚¨áÔ∏è",
        reply_markup=get_callback_btns(
            btns={
                "–¢–µ–∫—Å—Ç–æ–º": "text_in_chat",
                "–§–∞–π–ª–æ–º": "file_in_chat",
            }
        ),
    )


@admin_private_router.callback_query(
    StateFilter(GetApiForm.api_url), F.data == "text_in_chat"
)
async def text_api_url(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    rest_api_url = user_data["api_url"]
    data = await get_api_data(rest_api_url)
    if data:
        results = await format_json_data(data)
        await send_long_message(callback_query.message, results)
    else:
        await callback_query.message.reply(
            "<b>‚ùó‚ùó‚ùó\n\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å API.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.\n\n‚ùó‚ùó‚ùó</b>",
            reply_markup=get_keyboard("üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"),
        )

    await state.clear()


@admin_private_router.callback_query(
    StateFilter(GetApiForm.api_url), F.data == "file_in_chat"
)
async def file_api_url(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    rest_api_url = user_data["api_url"]
    data = await get_api_data(rest_api_url)
    if data:
        file_path = await save_data_to_file(data)
        with open(file_path, "rb") as file:
            await callback_query.message.reply_document(
                BufferedInputFile(file.read(), filename="data.json"),
                reply_markup=get_keyboard("üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"),
            )
    else:
        await callback_query.message.reply(
            "<b>‚ùó‚ùó‚ùó\n\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å API.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.\n\n‚ùó‚ùó‚ùó</b>",
            reply_markup=get_keyboard("üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"),
        )

    await state.clear()


async def get_api_data(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        return data
    except requests.RequestException as e:
        logging.error(f"‚ùó‚ùó‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö REST API: {e}")
        return None


async def format_json_data(data):
    def format_dict(d, indent=0):
        formatted = ""
        for key, value in d.items():
            if isinstance(value, dict):
                formatted += (
                    " " * indent + f"<b>{key}:</b>\n" + format_dict(value, indent + 4)
                )
            elif isinstance(value, list):
                formatted += (
                    " " * indent
                    + f"<b>{key}:</b>\n"
                    + "".join(format_list(value, indent + 4))
                )
            else:
                formatted += " " * indent + f"<b>{key}:</b> {value}\n"
        return formatted

    def format_list(lst, indent=0):
        formatted = []
        for item in lst:
            if isinstance(item, dict):
                formatted.append(format_dict(item, indent))
            else:
                formatted.append(" " * indent + f"{item}\n")
        return formatted

    if isinstance(data, dict):
        result = [format_dict(data)]
    elif isinstance(data, list):
        result = format_list(data)
    else:
        result = [str(data)]

    return result


async def send_long_message(message: types.Message, texts: list):
    max_length = 4096
    for text in texts:
        for i in range(0, len(text), max_length):
            await message.answer(
                text[i : i + max_length],
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True,
                reply_markup=default_superadmin_keyboard,
            )
            await asyncio.sleep(1.5)


async def save_data_to_file(data):
    file_path = "data.json"
    with open(file_path, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)
    return file_path


@admin_private_router.message(F.text == "üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
async def back_rest_api(message: types.Message):
    if is_superadmin(message.from_user.id):
        await message.reply(
            f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥", reply_markup=default_superadmin_keyboard
        )
    elif is_admin(message.from_user.id):
        await message.reply(f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥", reply_markup=default_admin_keyboard)


class SendMessage(StatesGroup):
    text = State()
    channel_id = State()
    confirm_send = State()
    photo = State()


def confirm_btn():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ")],
            [types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å‚è≠Ô∏è")],
            [types.KeyboardButton(text="–ù–∞–∑–∞–¥üîô")],
        ],
        resize_keyboard=True,
    )


def get_channel_kb():
    channels = get_channels()
    buttons = [
        types.InlineKeyboardButton(text=channel[1], callback_data=channel[0])
        for channel in channels
    ]
    inline_keyboard = [buttons[i : i + 1] for i in range(0, len(buttons), 1)]
    return types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


@admin_private_router.message(Command("send_message"))
@admin_private_router.message(F.text == "üîÄ–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def cmd_send_message(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª ‚¨áÔ∏è", reply_markup=get_channel_kb())
    await state.set_state(SendMessage.channel_id)


@admin_private_router.callback_query(
    StateFilter(SendMessage.channel_id),
    lambda callback_query: callback_query.data.startswith("@"),
)
async def process_channel_selection(
    callback_query: types.CallbackQuery, state: FSMContext
):
    selected_channel = callback_query.data
    await state.update_data(channel_id=selected_channel)
    await callback_query.message.reply(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª üì©", reply_markup=confirm_btn()
    )
    await state.set_state(SendMessage.text)


@admin_private_router.message(StateFilter(SendMessage.text))
async def process_message_text(message: types.Message, state: FSMContext):

    if message.text == "–ù–∞–∑–∞–¥üîô":
        if is_superadmin(message.from_user.id):
            await message.answer(
                "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.",
                reply_markup=default_superadmin_keyboard,
            )
            await state.clear()
        elif is_admin(message.from_user.id):
            await message.answer(
                "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=default_admin_keyboard
            )
            await state.clear()
    elif message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å‚è≠Ô∏è":
        await state.update_data(text=None)
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥ ‚è≠Ô∏è",
            reply_markup=confirm_btn(),
        )
        await state.set_state(SendMessage.photo)
    else:
        await state.update_data(text=message.text)
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥ ‚è≠Ô∏è",
            reply_markup=confirm_btn(),
        )
        await state.set_state(SendMessage.photo)


@admin_private_router.message(
    StateFilter(SendMessage.photo), F.content_type.in_({"photo", "text"})
)
async def process_message_photo(message: types.Message, state: FSMContext):
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å‚è≠Ô∏è":
        await state.update_data(photo=None)
    elif message.photo:
        photo = message.photo[-1].file_id
        await state.update_data(photo=photo)
    elif message.text == "–ù–∞–∑–∞–¥üîô":
        if is_superadmin(message.from_user.id):
            await message.answer(
                "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.",
                reply_markup=default_superadmin_keyboard,
            )
            await state.clear()
        elif is_admin(message.from_user.id):
            await message.answer(
                "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=default_admin_keyboard
            )
            await state.clear()
        return

    user_data = await state.get_data()
    channel_id = user_data["channel_id"]
    message_text = user_data["text"]
    photo = user_data.get("photo")

    if photo:
        await message.answer_photo(
            photo=photo,
            caption=f"<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–Ω–∞–ª üíª: </b> {channel_id}\n<b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è üì©: </b> {message_text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è",
            reply_markup=confirm_btn(),
        )
    else:
        await message.answer(
            f"<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–Ω–∞–ª üíª: </b> {channel_id}\n<b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è üì©: </b> {message_text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è",
            reply_markup=confirm_btn(),
        )

    await state.set_state(SendMessage.confirm_send)


@admin_private_router.message(StateFilter(SendMessage.confirm_send))
async def confirm_send_message(message: types.Message, state: FSMContext, bot: Bot):
    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ":
        user_data = await state.get_data()
        channel_id = user_data["channel_id"]
        message_text = user_data["text"]
        photo = user_data.get("photo")

        try:
            if photo:
                await bot.send_photo(
                    chat_id=channel_id, photo=photo, caption=message_text
                )
            else:
                await bot.send_message(chat_id=channel_id, text=message_text)
            if is_superadmin(message.from_user.id):
                await message.answer(
                    "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ‚úâÔ∏è",
                    reply_markup=default_superadmin_keyboard,
                )
            elif is_admin(message.from_user.id):
                await message.answer(
                    "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ‚úâÔ∏è",
                    reply_markup=default_admin_keyboard,
                )

        except Exception as e:
            await message.answer(
                f"–û—à–∏–±–∫–∞ - <b>{e}</b>, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É –±–æ—Ç–∞.",
                reply_markup=default_admin_keyboard,
            )

    elif message.text == "–ù–∞–∑–∞–¥üîô":
        if is_superadmin(message.from_user.id):
            await message.answer(
                "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.",
                reply_markup=default_superadmin_keyboard,
            )
            await state.clear()
        elif is_admin(message.from_user.id):
            await message.answer(
                "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=default_admin_keyboard
            )
            await state.clear()

    await state.clear()


class SendToAllUsers(StatesGroup):
    text = State()
    image = State()
    confirm_send = State()


def confirm_send_to_all_btn():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ")],
            [types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å‚è≠Ô∏è")],
            [types.KeyboardButton(text="–ù–∞–∑–∞–¥üîô")],
        ],
        resize_keyboard=True,
    )


@admin_private_router.message(Command("send_to_all"))
async def send_to_all(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º üìß",
        reply_markup=confirm_send_to_all_btn(),
    )
    await state.set_state(SendToAllUsers.text)


@admin_private_router.message(StateFilter(SendToAllUsers.text))
async def process_message_to_all_text(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥üîô":
        await cancel_send_message(message, state)
    elif message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å‚è≠Ô∏è":
        await state.update_data(text=None)
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥ ‚è≠Ô∏è",
            reply_markup=confirm_send_to_all_btn(),
        )
        await state.set_state(SendToAllUsers.image)
    else:
        await state.update_data(text=message.text)
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥ ‚è≠Ô∏è",
            reply_markup=confirm_send_to_all_btn(),
        )
        await state.set_state(SendToAllUsers.image)


@admin_private_router.message(
    StateFilter(SendToAllUsers.image), F.content_type.in_({"photo", "text"})
)
async def process_message_to_all_photo(message: types.Message, state: FSMContext):
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å‚è≠Ô∏è":
        await state.update_data(image=None)
    elif message.photo:
        image = message.photo[-1].file_id
        await state.update_data(image=image)
    elif message.text == "–ù–∞–∑–∞–¥üîô":
        await cancel_send_message(message, state)
        return

    user_data = await state.get_data()
    message_text = user_data.get("text")
    image = user_data.get("image")

    if image:
        await message.answer_photo(
            photo=image,
            caption=f"<b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è üì©: </b> {message_text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è",
            reply_markup=confirm_send_to_all_btn(),
        )
    else:
        await message.answer(
            f"<b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è üì©: </b> {message_text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è",
            reply_markup=confirm_send_to_all_btn(),
        )

    await state.set_state(SendToAllUsers.confirm_send)


@admin_private_router.message(StateFilter(SendToAllUsers.confirm_send))
async def confirm_send_to_all_message(
    message: types.Message, state: FSMContext, bot: Bot
):
    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ":
        user_data = await state.get_data()
        message_text = user_data.get("text")
        image = user_data.get("image")

        all_users = get_all_users()
        success_count = 0
        fail_count = 0

        for user_id in all_users:
            try:
                if image:
                    await bot.send_photo(
                        chat_id=user_id, photo=image, caption=message_text
                    )
                else:
                    await bot.send_message(chat_id=user_id, text=message_text)
                success_count += 1
            except Exception as e:
                fail_count += 1

        if is_superadmin(message.from_user.id):
            await message.answer(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º! {fail_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.",
                reply_markup=default_superadmin_keyboard,
            )
        elif is_admin(message.from_user.id):
            await message.answer(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º! {fail_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.",
                reply_markup=default_admin_keyboard,
            )

    elif message.text == "–ù–∞–∑–∞–¥üîô":
        await cancel_send_message(message, state)

    await state.clear()


async def cancel_send_message(message: types.Message, state: FSMContext):
    if is_superadmin(message.from_user.id):
        await message.answer(
            "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=default_superadmin_keyboard
        )
    elif is_admin(message.from_user.id):
        await message.answer(
            "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=default_admin_keyboard
        )
    await state.clear()
