import logging
from aiogram import F, Router, types, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from common.commands import *
from common.db_settings import *
from filters.chat_types import *
from keyboards.inline import *
from keyboards.reply import *


logging.basicConfig(level=logging.INFO)


superadmin_private_router = Router()
superadmin_private_router.message.filter(ChatTypeFilter(["private"]), IsSuperAdmin())


@superadmin_private_router.message(Command("spanel"))
@superadmin_private_router.message(F.text == "üéÉ–ü–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def superadmin_panel(message: types.Message):
    await message.answer(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —É–≤–∞–∂–∞–µ–º—ã–π —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
        reply_markup=superadmin_keyboard,
    )


@superadmin_private_router.message(F.text == "üî∞–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π")
async def admin_managment(message: types.Message):
    await message.answer(
        f"–í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.", reply_markup=admin_control
    )


@superadmin_private_router.message(F.text == "üìã–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")
async def admin_list(message: types.Message):
    choice_admin = get_keyboard("‚ôüÔ∏è–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", "üëë–°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", "üîô–ù–∞–∑–∞–¥")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é.", reply_markup=choice_admin)


@superadmin_private_router.message(F.text == "üîô–ù–∞–∑–∞–¥")
async def return_admin_control(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥", reply_markup=admin_control)
    await state.clear()


@superadmin_private_router.message(Command("admlist"))
@superadmin_private_router.message(F.text == "‚ôüÔ∏è–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")
async def get_admin_list(message: types.Message):
    admins = get_admins()

    response = "<b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏: </b>\n"
    if admins:
        for id, username, name, surname in admins:
            response += f"üë§ ID: {id} | Username: ({username}) | Name: {name} | Surname: {surname}\n"
    else:
        response += "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç."

    await message.answer(response)


@superadmin_private_router.message(Command("sadmlist"))
@superadmin_private_router.message(F.text == "üëë–°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")
async def get_superadmin_list(message: types.Message):
    superadmins = get_superadmins()

    response = "<b>–°–ø–∏—Å–æ–∫ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏: </b>\n"
    if superadmins:
        for id, username, name, surname in superadmins:
            response += f"üë§ ID: {id} | Username: ({username}) | Name: {name} | Surname: {surname}\n"
    else:
        response += "–°–ø–∏—Å–æ–∫ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç."

    await message.answer(response)


@superadmin_private_router.message(Command("scommands"))
@superadmin_private_router.message(F.text == "üí¨–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def scommands(message: types.Message):
    for superadm_cmds_list in superadm_cmd_list:
        if superadm_cmds_list:
            await message.reply(superadm_cmds_list)


class AddAdmin(StatesGroup):
    user_choice = State()
    admin_id = State()
    admin_username = State()
    admin_name = State()
    admin_surname = State()


cancel_add = get_keyboard("‚úñÔ∏è–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")


@superadmin_private_router.message(Command("add_admin"))
@superadmin_private_router.message(F.text == "‚ûï–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def add_administrator(message: types.Message, state: FSMContext):
    choice_add_admin_kb = get_keyboard(
        "üñäÔ∏è–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "üîô–ù–∞–∑–∞–¥",
    )
    await message.answer(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=choice_add_admin_kb
    )
    await state.set_state(AddAdmin.user_choice)


@superadmin_private_router.message(AddAdmin.user_choice)
async def process_user_choice(message: types.Message, state: FSMContext):
    user_choice = message.text
    await state.update_data(user_choice=user_choice)

    if message.text == "‚úñÔ∏è–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
        await message.answer(
            "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admin_control
        )
        await state.clear()

    else:
        if user_choice == "üñäÔ∏è–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∏–∂–µ...", reply_markup=cancel_add
            )
            await state.set_state(AddAdmin.admin_id)
        elif user_choice == "üîô–ù–∞–∑–∞–¥":
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥", reply_markup=admin_control)
            await state.clear()
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            await state.set_state(AddAdmin.user_choice)
            await state.clear()


@superadmin_private_router.message(AddAdmin.admin_id)
async def process_admin_id(message: types.Message, state: FSMContext):
    admin_id = message.text
    admins = get_admins()

    if message.text == "‚úñÔ∏è–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
        await message.answer(
            "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admin_control
        )
        await state.clear()

    else:
        if any(admin[0] == admin_id for admin in admins):
            await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=admin_control
            )
            await state.clear()
        else:
            await state.update_data(admin_id=admin_id)
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...", reply_markup=cancel_add
            )
            await state.set_state(AddAdmin.admin_username)


@superadmin_private_router.message(AddAdmin.admin_username)
async def process_admin_username(message: types.Message, state: FSMContext):
    admin_username = message.text
    admins = get_admins()

    if message.text == "‚úñÔ∏è–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
        await message.answer(
            "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admin_control
        )
        await state.clear()

    else:
        if any(admin[1] == admin_username for admin in admins):
            await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=admin_control
            )
            await state.clear()
        else:
            await state.update_data(admin_username=admin_username)
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...", reply_markup=cancel_add
            )
            await state.set_state(AddAdmin.admin_name)


@superadmin_private_router.message(AddAdmin.admin_name)
async def process_admin_name(message: types.Message, state: FSMContext):

    if message.text == "‚úñÔ∏è–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
        await message.answer(
            "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admin_control
        )
        await state.clear()

    else:
        admin_name = message.text
        await state.update_data(admin_name=admin_name)
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...", reply_markup=cancel_add
        )
        await state.set_state(AddAdmin.admin_surname)


@superadmin_private_router.message(AddAdmin.admin_surname)
async def process_admin_surname(message: types.Message, state: FSMContext):
    admin_surname = message.text
    user_data = await state.get_data()
    admins = get_admins()

    if message.text == "‚úñÔ∏è–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
        await message.answer(
            "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admin_control
        )
        await state.clear()

    else:
        if any(
            admin[0] == user_data.get("admin_id")
            or admin[1] == user_data.get("admin_username")
            for admin in admins
        ):
            await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=admin_control
            )
            await state.clear()

        else:
            add_admin(
                user_id=user_data.get("admin_id"),
                username=user_data.get("admin_username"),
                name=user_data.get("admin_name"),
                surname=admin_surname,
            )
            await message.answer(
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=admin_control
            )
            await state.clear()


class DelAdmin(StatesGroup):
    admin_id = State()
    confirm_send = State()


confirm_btn = get_keyboard("‚òëÔ∏è–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚úñÔ∏è–û—Ç–º–µ–Ω–∞")


@superadmin_private_router.message(Command("del_admin"))
@superadmin_private_router.message(F.text == "‚ûñ–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def delete_admin(message: types.Message, state: FSMContext):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.",
        reply_markup=confirm_btn,
    )
    await state.set_state(DelAdmin.admin_id)


@superadmin_private_router.message(DelAdmin.admin_id)
async def process_del_admin(message: types.Message, state: FSMContext):
    if message.text == "‚úñÔ∏è–û—Ç–º–µ–Ω–∞":
        await message.answer(
            "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admin_control
        )
        await state.clear()
    else:
        try:
            admin_id = int(message.text.strip())
            await message.answer(
                f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID {admin_id}?",
                reply_markup=confirm_btn,
            )
            await state.update_data(admin_id=admin_id)
            await state.set_state(DelAdmin.confirm_send)
        except ValueError:
            await message.reply(
                "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=confirm_btn
            )


@superadmin_private_router.message(StateFilter(DelAdmin.confirm_send))
async def confirm_del_admin(message: types.Message, state: FSMContext):
    if message.text == "‚úñÔ∏è–û—Ç–º–µ–Ω–∞":
        await message.answer(
            "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admin_control
        )
        await state.clear()

    elif message.text == "‚òëÔ∏è–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        state_data = await state.get_data()
        admin_id = state_data.get("admin_id")

        if admin_id in [admin[0] for admin in get_admins()]:
            del_admin(admin_id)
            await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω.", reply_markup=admin_control)
        else:
            await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=admin_control
            )

        await state.clear()


@superadmin_private_router.message(F.text == "üì¢–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏")
async def admin_managment(message: types.Message):
    await message.answer(
        f"–í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏.", reply_markup=channel_control
    )


@superadmin_private_router.message(Command("channel_list"))
@superadmin_private_router.message(F.text == "üìã–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")
async def get_channel(message: types.Message):
    channels = get_channels()

    response = "<b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: </b>\n"
    if channels:
        for channel_id, title in channels:
            response += f"üìÉ Channel ID: ({channel_id}) | Title: {title}\n"
    else:
        response += "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç."

    await message.answer(response)


class AddChannel(StatesGroup):
    channel_link = State()
    channel_title = State()
    confirm_add_channel = State()


cancel_add_channel = get_keyboard("‚úñÔ∏è–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")


@superadmin_private_router.message(Command("add_channel"))
@superadmin_private_router.message(F.text == "‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
async def add_channel_command(message: types.Message, state: FSMContext):
    choice_add_channel_kb = get_keyboard(
        "üìç–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
        "üîô–ù–∞–∑–∞–¥",
    )
    await message.answer(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞.", reply_markup=choice_add_channel_kb
    )
    await state.set_state(AddChannel.confirm_add_channel)


@superadmin_private_router.message(AddChannel.confirm_add_channel)
async def process_confirm_add_channel(message: types.Message, state: FSMContext):
    confirm_add_channel = message.text
    await state.update_data(confirm_add_channel=confirm_add_channel)

    if message.text == "‚úñÔ∏è–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
        await message.answer(
            "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞.", reply_markup=channel_control
        )
        await state.clear()
    elif confirm_add_channel == "üìç–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª":
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –Ω–∏–∂–µ...",
            reply_markup=cancel_add_channel,
        )
        await state.set_state(AddChannel.channel_link)
    elif confirm_add_channel == "üîô–ù–∞–∑–∞–¥":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥", reply_markup=channel_control)
        await state.clear()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        await state.set_state(AddChannel.confirm_add_channel)
        await state.clear()


@superadmin_private_router.message(AddChannel.channel_link)
async def process_channel_link(message: types.Message, state: FSMContext):
    channel_link = message.text
    channels = get_channels()

    if message.text == "‚úñÔ∏è–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
        await message.answer(
            "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞.", reply_markup=channel_control
        )
        await state.clear()
    elif any(channel[0] == channel_link for channel in channels):
        await message.answer("–ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=channel_control)
        await state.clear()
    else:
        await state.update_data(channel_link=channel_link)
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞...", reply_markup=cancel_add_channel
        )
        await state.set_state(AddChannel.channel_title)


@superadmin_private_router.message(AddChannel.channel_title)
async def process_channel_title(message: types.Message, state: FSMContext):
    channel_title = message.text
    user_data = await state.get_data()
    channels = get_channels()

    if message.text == "‚úñÔ∏è–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
        await message.answer(
            "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞.", reply_markup=channel_control
        )
        await state.clear()
    elif any(
        channel[0] == user_data.get("channel_link") or channel[1] == channel_title
        for channel in channels
    ):
        await message.answer("–ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=channel_control)
        await state.clear()
    else:
        add_channel(
            channel_link=user_data.get("channel_link"),
            title=channel_title,
        )
        await message.answer("–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=channel_control)
        await state.clear()


class DelChannel(StatesGroup):
    channel_link = State()
    confirm_channel_send = State()


confirm_del_channle_btn = get_keyboard("‚òëÔ∏è–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚úñÔ∏è–û—Ç–º–µ–Ω–∞")


@superadmin_private_router.message(Command("del_channel"))
@superadmin_private_router.message(F.text == "‚ûñ–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")
async def delete_admin(message: types.Message, state: FSMContext):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.",
        reply_markup=confirm_del_channle_btn,
    )
    await state.set_state(DelChannel.channel_link)


@superadmin_private_router.message(DelChannel.channel_link)
async def process_del_channel(message: types.Message, state: FSMContext):
    if message.text == "‚úñÔ∏è–û—Ç–º–µ–Ω–∞":
        await message.answer(
            "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞.", reply_markup=channel_control
        )
        await state.clear()
    else:
        try:
            channel_link = message.text.strip()
            await message.answer(
                f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª {channel_link}?",
                reply_markup=confirm_del_channle_btn,
            )
            await state.update_data(channel_link=channel_link)
            await state.set_state(DelChannel.confirm_channel_send)
        except ValueError as e:
            await message.reply(
                "–û—à–∏–±–∫–∞: {e}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É –±–æ—Ç–∞.",
                reply_markup=confirm_del_channle_btn,
            )


@superadmin_private_router.message(StateFilter(DelChannel.confirm_channel_send))
async def confirm_del_channel(message: types.Message, state: FSMContext):
    if message.text == "‚úñÔ∏è–û—Ç–º–µ–Ω–∞":
        await message.answer(
            "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞.", reply_markup=channel_control
        )
        await state.clear()

    elif message.text == "‚òëÔ∏è–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        state_data = await state.get_data()
        channel_link = state_data.get("channel_link")

        if channel_link in [channel[0] for channel in get_channels()]:
            del_channel(channel_link)
            await message.answer("–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω.", reply_markup=channel_control)
        else:
            await message.answer(
                "–î–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∫–∞–Ω–∞–ª–æ–≤.",
                reply_markup=channel_control,
            )

        await state.clear()
